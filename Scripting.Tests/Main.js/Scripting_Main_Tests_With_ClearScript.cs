using CSharpFunctionalExtensions;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Scripting.Js.v1;
using System;

namespace Scripting.Tests
{
    [TestClass]
    public class Scripting_Main_Tests_With_ClearScript
    {
        private (string ScriptsPath, ScriptingContext JsScriptingContext) InitWithRealFs()
        {
            Result<string> scriptsPath = FileIO.SearchAFolderAboveTheCurrentDirectoryOfTheApplication(Scripting_TestSettings.ScriptsPath_JsScripts); // find the folder with the scripts
            if (scriptsPath.IsFailure) throw new InvalidOperationException("scripts folder not found");
            return (scriptsPath.Value, ScriptingContext.ScriptingContextWithRealFs(scriptsPath.Value));
        }

        [TestMethod]
        public void Scripting_Main_Test_With_ClearScript()
        {
            (string scriptsPath, ScriptingContext jsScriptingContext) = InitWithRealFs();

            JsScriptRunner jsScriptRunner = JsScriptRunner.RunnerWithContext(
                JsScriptRunnerType.ClearScript,
                jsScriptingContext,
                Scripting_TestSettings.ScriptingContextName);

            jsScriptRunner.Run("var exports = {};");  // required by the row of 'main.js' ```Object.defineProperty(exports, "__esModule", { value: true });``` generated by TypeScript
            jsScriptRunner.RunScriptFile(System.IO.Path.Combine(scriptsPath, "./lib/myrequire.js"));  // execute myrequire.js script from real FS
            jsScriptRunner.RunScriptFile(System.IO.Path.Combine(scriptsPath, "main.js"));  // execute main.js script from real FS
            Assert.AreEqual("flag value", jsScriptingContext.ReadFile("zzz flagfile"));  // test output of Js scripts
        }
    }
}
